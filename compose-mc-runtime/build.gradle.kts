
plugins {
    id("org.jetbrains.kotlin.plugin.compose")
    alias(libs.plugins.jetbrainsCompose)

    id 'java-library'
    id 'idea'
    id 'maven-publish'
    // Adds the Kotlin Gradle plugin
    id 'org.jetbrains.kotlin.jvm'
    id 'org.jetbrains.kotlinx.atomicfu'

    id 'net.neoforged.gradle.userdev'
}

group = "com.example.examplemod"
version = "1.0.0"

base {
    archivesName = modId
}

// Mojang ships Java 21 to end users in 1.20.5+, so your mod should target Java 21.
java.toolchain.languageVersion = JavaLanguageVersion.of(21)

kotlin {
    jvmToolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

jarJar.enable()

configurations {
    shadow {
        exclude group: 'org.jetbrains', module: 'annotations'
    }
}

dependencies {
    // Use the latest version of NeoForge
    implementation "net.neoforged:neoforge:${neoVersion}"

    // Must use the '-neoforge' version on NeoForge. If on regular forge, omit the '-neoforge'
    implementation 'thedarkcolour:kotlinforforge-neoforge:5.3.0'

//    libraries(libs.compose.runtime)
    compileOnly(libs.compose.runtime)
    shadow(libs.compose.runtime)
//    libraries(libs.compose.ui)
}

tasks {
    jarJar {
        configure {
            from(provider { shadow.map { zipTree(it) }.toTypedArray() })
            manifest {
                attributes(
                        "Automatic-Module-Name" to "thedarkcolour.kotlinforforge",
                        "FMLModType" to "LIBRARY"
                )
            }
        }
    }

    assemble {
        dependsOn(jarJar)
    }
}

runs {
    configureEach {
        dependencies {
            runtime libs.compose.runtime
        }
    }
}

// Default run configurations.
// These can be tweaked, removed, or duplicated as needed.
runs {
    configureEach {
        // Recommended logging data for a userdev environment
        // The markers can be added/remove as needed separated by commas.
        // "SCAN": For mods scan.
        // "REGISTRIES": For firing of registry events.
        // "REGISTRYDUMP": For getting the contents of all registries.
        systemProperty 'forge.logging.markers', 'REGISTRIES'

        // Recommended logging level for the console
        // You can set various levels here.
        // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
        systemProperty 'forge.logging.console.level', 'debug'

        modSource project.sourceSets.main
    }

    data {
        // example of overriding the workingDirectory set in configureEach above, uncomment if you want to use it
        // workingDirectory project.file('run-data')

        // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
        programArguments.addAll '--mod', project.modId, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

// Sets up a dependency configuration called 'localRuntime'.
// This configuration should be used instead of 'runtimeOnly' to declare
// a dependency that will be present for runtime testing but that is
// "optional", meaning it will not be pulled by dependents of this mod.
configurations {
    runtimeClasspath.extendsFrom localRuntime
}

// This block of code expands all declared replace properties in the specified resource targets.
// A missing property will result in an error. Properties are expanded using ${} Groovy notation.
// When "copyIdeResources" is enabled, this will also run before the game launches in IDE environments.
// See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            minecraft_version      : minecraftVersion,
            minecraft_version_range: minecraftVersionRange,
            neo_version            : neoVersion,
            neo_version_range      : neoVersionRange,
            loader_version_range   : loaderVersionRange,
            mod_id                 : modId,
            mod_name               : modName,
            mod_license            : modLicense,
            mod_version            : modVersion,
            mod_authors            : modAuthors,
            mod_description        : modDescription,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/neoforge.mods.toml']) {
        expand replaceProperties
    }
}

// Example configuration to allow publishing using the maven-publish plugin
publishing {
    publications {
        register('mavenJava', MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/repo"
        }
    }
}

// IDEA no longer automatically downloads sources/javadoc jars for dependencies, so we need to explicitly enable the behavior.
idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}
