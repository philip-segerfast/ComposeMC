import org.jetbrains.kotlin.gradle.dsl.JvmTarget
import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

val modVersion: String by project
val modGroupId: String by project

val modId: String by project
val modName: String by project
val modLicense: String by project
val modAuthors: String by project
val neoVersion: String by project
val modDescription: String by project
val neoVersionRange: String by project
val minecraftVersion: String by project
val loaderVersionRange: String by project
val minecraftVersionRange: String by project

jarJar.enable()

plugins {
    id("org.jetbrains.kotlin.jvm")
    kotlin("plugin.serialization") version "2.0.0"
    id("org.jetbrains.kotlin.plugin.compose")
    alias(libs.plugins.jetbrainsCompose)

    java
    idea

    alias(libs.plugins.neogradle)

//    id("com.matyrobbrt.jarinjar") version "1.1.+"
//    id("com.github.johnrengelman.shadow") version "8.1.1"
}

jarJar.enable()

group = "com.example.examplemod"
version = "1.0.0"

base {
    archivesName = modId
}

// Mojang ships Java 21 to end users in 1.20.5+, so your mod should target Java 21.
java.toolchain.languageVersion = JavaLanguageVersion.of(21)

configurations {
    apiElements {
        artifacts.clear()
    }
    runtimeElements {
        // Include subprojects as transitive runtime dependencies
        setExtendsFrom(hashSetOf(configurations.getByName("api")))
        // Publish the jarJar ONLY
        artifacts.clear()
        outgoing.artifact(tasks.jarJar)
    }
}

dependencies {
    implementation("net.neoforged:neoforge:${neoVersion}")
    implementation("thedarkcolour:kotlinforforge-neoforge:5.4.0")

    jarJar(projects.composeLib)
    implementation(projects.composeLib)
}

// Default run configurations.
// These can be tweaked, removed, or duplicated as needed.
runs {
    configureEach {
        // Recommended logging data for a userdev environment
        // The markers can be added/remove as needed separated by commas.
        // "SCAN": For mods scan.
        // "REGISTRIES": For firing of registry events.
        // "REGISTRYDUMP": For getting the contents of all registries.
        systemProperty("forge.logging.markers", "REGISTRIES")

        // Recommended logging level for the console
        // You can set various levels here.
        // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
        systemProperty("forge.logging.console.level", "debug")

        modSource(project.sourceSets.main.get())

        programArguments.addAll(listOf("--mod", modId, "--all", "--output", file("src/generated/resources/").absolutePath, "--existing", file("src/main/resources/").absolutePath))
    }
}

// Include resources generated by data generators.
sourceSets.main {
    resources.srcDir("src/generated/resources")
}

// This block of code expands all declared replace properties in the specified resource targets.
// A missing property will result in an error. Properties are expanded using ${} Groovy notation.
// When "copyIdeResources" is enabled, this will also run before the game launches in IDE environments.
// See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
tasks.withType<ProcessResources>().configureEach {
    val replaceProperties = mapOf(
        "minecraft_version" to minecraftVersion,
        "minecraft_version_range" to minecraftVersionRange,
        "neo_version" to neoVersion,
        "neo_version_range" to neoVersionRange,
        "loader_version_range" to loaderVersionRange,
        "mod_id" to modId,
        "mod_name" to modName,
        "mod_license" to modLicense,
        "mod_version" to modVersion,
        "mod_authors" to modAuthors,
        "mod_description" to modDescription
    )
    inputs.properties(replaceProperties)

    filesMatching("META-INF/neoforge.mods.toml") {
        expand(replaceProperties)
    }
}

// IDEA no longer automatically downloads sources/javadoc jars for dependencies, so we need to explicitly enable the behavior.
idea {
    module {
        isDownloadSources = true
        isDownloadJavadoc = true
    }
}
